---
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';

interface Props {
  title: string;
  description?: string;
  forceGA?: boolean; // Add this prop to force GA in development
}

const { title, description = "A weekly personal blog by Soham", forceGA = false } = Astro.props;
const isProd = import.meta.env.PROD;
const loadGA = isProd || forceGA; // Load GA in production OR if forceGA is true
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, viewport-fit=cover, maximum-scale=5.0" />
    <link rel="icon" type="image/svg+xml" href="/qubit_dark.png" />
    <meta name="generator" content={Astro.generator} />
    <meta name="description" content={description} />
    <title>{title} | bitsbysoh4m</title>
    <!-- Inline the theme initialization script -->
    <script is:inline>
      const theme = (() => {
        if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
          return localStorage.getItem('theme');
        }
        if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
          return 'dark';
        }
        return 'light';
      })();
    
      if (theme === 'light') {
        document.documentElement.classList.remove('dark');
      } else {
        document.documentElement.classList.add('dark');
      }
      window.localStorage.setItem('theme', theme);
    </script>
    <script defer data-domain="bitsbysoh4m.netlify.app" src="https://plausible.io/js/script.js"></script>
    
    <!-- Google Analytics - Load in production or when forced for testing -->
    {loadGA && (
      <>
        <script is:inline define:vars={{ analyticsId: 'G-P300W8XW2P', isProd: import.meta.env.PROD }}>
          // Ensure we don't initialize GA multiple times
          if (!window.gaInitialized) {
            window.dataLayer = window.dataLayer || [];
            window.gtag = function() {
              dataLayer.push(arguments);
            };
            window.gtag('js', new Date());

            // Get the current hostname to set proper cookie domain
          const hostname = window.location.hostname;
          const domainParts = hostname.split('.');
          let cookieDomain;
          if (hostname.endsWith('.netlify.app')) {
          cookieDomain = hostname; // âœ… Use the actual subdomain
          } else if (domainParts.length > 2 && (hostname.includes('github.io'))) {
          cookieDomain = `.${domainParts[domainParts.length - 2]}.${domainParts[domainParts.length - 1]}`;
          } else if (hostname === 'localhost') {
           cookieDomain = '';
          } else {
          cookieDomain = hostname;
          }


            window.gtag('config', analyticsId, {
  cookie_domain: cookieDomain,
  cookie_update: false,
  cookie_flags: 'SameSite=None;Secure',
  debug_mode: !isProd
});


            // Load the analytics script after configuration
            if (!document.querySelector('script[src*="googletagmanager.com/gtag/js"]')) {
              const gtagScript = document.createElement('script');
              gtagScript.async = true;
              gtagScript.src = `https://www.googletagmanager.com/gtag/js?id=${analyticsId}`;
              document.head.appendChild(gtagScript);
            }

            window.gaInitialized = true;
            console.log(`Google Analytics configured with cookie domain: ${cookieDomain} in ` + 
              (isProd ? 'production' : 'development (test mode)'));
          }
        </script>
      </>
    )}
    
  </head>
  <body class="min-h-screen bg-surface-light dark:bg-surface-dark text-gray-900 dark:text-gray-100 transition-colors">
    <div class="max-w-6xl mx-auto px-4 md:px-6 lg:px-8 py-4 md:py-6 lg:py-8">
      <Header />
      <main class="my-4 md:my-6 lg:my-8">
        <slot />
      </main>
      <Footer />
    </div>
    
    {loadGA && (
      <script is:inline>
        // Wait for page to fully load before attaching navigation event listener
        window.addEventListener('load', function() {
          // Only ever send 'event' for page_view on navigation, never 'config'
          function bindAstroNavigation() {
            if (typeof window.gtag === 'function') {
              document.addEventListener('astro:after-swap', () => {
                window.gtag('event', 'page_view', {
                  send_to: 'G-P300W8XW2P',
                  page_location: window.location.href,
                  page_path: window.location.pathname,
                  page_title: document.title,
                  non_interaction: false
                });
              });
            } else {
              setTimeout(bindAstroNavigation, 500);
            }
          }
          bindAstroNavigation();
        });
      </script>
    )}
  </body>
</html>

<style is:global>
  :root {
    --accent: 136, 58, 234;
    --accent-light: 224, 204, 250;
    --accent-dark: 49, 10, 101;
    --accent-gradient: linear-gradient(
      45deg,
      rgb(var(--accent)),
      rgb(var(--accent-light)) 30%,
      white 60%
    );
  }
</style>