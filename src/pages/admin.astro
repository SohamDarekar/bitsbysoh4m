---
import BaseLayout from '../layouts/BaseLayout.astro';
---
<BaseLayout title="Admin Panel">
  <section class="max-w-5xl mx-auto mt-24 mb-16 bg-white dark:bg-surface-dark rounded-3xl shadow-2xl p-12 border border-gray-200 dark:border-gray-700 relative">
    <h1 class="text-5xl font-extrabold mb-4 text-center text-primary-900 dark:text-primary-200 tracking-tight flex items-center justify-center gap-3">
      <svg class="w-10 h-10 text-primary-700 dark:text-primary-300" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M12 4v16m8-8H4"/></svg>
      Admin Dashboard
    </h1>
    <p class="text-center text-gray-500 dark:text-gray-400 mb-12 text-lg">Manage newsletter, subscribers, and system status</p>
    <!-- Login Panel -->
    <div id="admin-login" class="flex flex-col gap-6 max-w-md mx-auto bg-gray-50 dark:bg-gray-900 rounded-xl p-8 border border-gray-200 dark:border-gray-700 shadow">
      <div class="flex items-center gap-3">
        <svg class="w-7 h-7 text-gray-400" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M12 17v.01M12 13a4 4 0 1 0 0-8 4 4 0 0 0 0 8zm0 0c-4.418 0-8 2.239-8 5v2h16v-2c0-2.761-3.582-5-8-5z"/></svg>
        <span class="font-semibold text-xl">Admin Login</span>
      </div>
      <input id="admin-password" type="password" placeholder="Admin password" class="w-full px-5 py-3 rounded-lg border border-gray-300 dark:border-gray-600 bg-gray-100 dark:bg-gray-800 text-gray-900 dark:text-gray-100 focus:outline-none focus:ring-2 focus:ring-primary-700 text-lg" autocomplete="current-password" />
      <button id="login-btn" class="w-full py-3 rounded-lg bg-primary-800 text-white font-semibold hover:bg-primary-900 transition flex items-center justify-center gap-2 text-lg">
        <span>Login</span>
        <svg id="login-spinner" class="w-6 h-6 animate-spin hidden" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><circle cx="12" cy="12" r="10" stroke-opacity="0.2"/><path d="M12 2a10 10 0 0 1 10 10" /></svg>
      </button>
      <div id="login-error" class="text-red-500 text-base min-h-[1.5em]"></div>
    </div>
    <!-- Admin Actions Panel -->
    <div id="admin-actions" class="hidden flex-col gap-12 mt-12">
      <!-- Tabs -->
      <div class="flex gap-3 mb-8 border-b-2 border-gray-200 dark:border-gray-700">
        <button class="tab-btn px-6 py-3 rounded-t-xl font-semibold text-gray-700 dark:text-gray-200 bg-gray-100 dark:bg-gray-800 border border-b-0 border-gray-200 dark:border-gray-700 text-lg" data-tab="api-db-tab">API/DB Test</button>
        <button class="tab-btn px-6 py-3 rounded-t-xl font-semibold text-gray-700 dark:text-gray-200 bg-gray-50 dark:bg-gray-900 border border-b-0 border-gray-200 dark:border-gray-700 text-lg" data-tab="newsletter-tab">Send Newsletter</button>
        <button class="tab-btn px-6 py-3 rounded-t-xl font-semibold text-gray-700 dark:text-gray-200 bg-gray-50 dark:bg-gray-900 border border-b-0 border-gray-200 dark:border-gray-700 text-lg" data-tab="subscribers-tab">Subscribers</button>
      </div>
      <!-- Tab Contents -->
      <div id="api-db-tab" class="tab-content">
        <!-- Admin Info & Stats -->
        <div class="flex flex-col md:flex-row gap-10 mb-6">
          <div class="flex-1 bg-gray-50 dark:bg-gray-900 rounded-2xl p-6 border border-gray-200 dark:border-gray-700 shadow">
            <div class="flex items-center gap-3 mb-3">
              <svg class="w-6 h-6 text-primary-700 dark:text-primary-300" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M12 17v.01M12 13a4 4 0 1 0 0-8 4 4 0 0 0 0 8zm0 0c-4.418 0-8 2.239-8 5v2h16v-2c0-2.761-3.582-5-8-5z"/></svg>
              <span class="font-semibold text-lg">Admin Info</span>
            </div>
            <div class="text-base text-gray-700 dark:text-gray-300 space-y-2">
              <div><b>Environment:</b> <span id="env-info"></span></div>
              <div><b>API Base:</b> <span id="api-base-info"></span> <button id="copy-api-base" class="ml-1 text-xs text-primary-700 dark:text-primary-300 underline">Copy</button></div>
              <div><b>Logged in at:</b> <span id="login-time"></span></div>
            </div>
          </div>
          <div class="flex-1 bg-gray-50 dark:bg-gray-900 rounded-2xl p-6 border border-gray-200 dark:border-gray-700 shadow">
            <div class="flex items-center gap-3 mb-3">
              <svg class="w-6 h-6 text-green-600" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><circle cx="12" cy="12" r="10" stroke-opacity="0.2"/><path d="M12 2a10 10 0 0 1 10 10" /></svg>
              <span class="font-semibold text-lg">System Status</span>
            </div>
            <div class="text-base text-gray-700 dark:text-gray-300 space-y-2">
              <div><b>API:</b> <span id="api-status" class="font-mono"></span></div>
              <div><b>Database:</b> <span id="db-status" class="font-mono"></span></div>
              <div><b>Subscribers:</b> <span id="subscriber-count" class="font-mono"></span></div>
            </div>
          </div>
        </div>
        <!-- Logs & Actions -->
        <div class="mt-10 bg-gray-50 dark:bg-gray-900 rounded-2xl p-6 border border-gray-200 dark:border-gray-700 shadow">
          <div class="flex items-center gap-3 mb-3">
            <svg class="w-6 h-6 text-gray-500" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M3 7v4a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V7"/><path d="M21 7V5a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v2"/><path d="M3 17v2a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-2"/></svg>
            <span class="font-semibold text-lg">Admin Actions & Logs</span>
          </div>
          <div id="admin-status" class="text-base min-h-[1.5em]"></div>
          <div id="admin-log" class="mt-3 text-sm text-gray-500 max-h-48 overflow-y-auto"></div>
          <button id="logout-btn" class="mt-6 py-2 px-6 rounded-lg bg-gray-300 dark:bg-gray-700 text-gray-900 dark:text-gray-100 hover:bg-gray-400 dark:hover:bg-gray-600 text-base">Logout</button>
        </div>
      </div>
      <div id="newsletter-tab" class="tab-content hidden">
        <!-- Newsletter Sender -->
        <div class="flex-1 bg-gray-50 dark:bg-gray-900 rounded-2xl p-8 border border-gray-200 dark:border-gray-700 shadow">
          <h2 class="text-2xl font-bold mb-6 flex items-center gap-3">
            <svg class="w-6 h-6 text-primary-700 dark:text-primary-300" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"/><polyline points="17 8 12 3 7 8"/><line x1="12" y1="3" x2="12" y2="15"/></svg>
            Send Newsletter
          </h2>

          <!-- Template Selection -->
          <div class="mb-6">
            <label class="block text-sm font-medium mb-2">Template</label>
            <div class="flex gap-3 flex-wrap">
              <button class="template-btn px-4 py-2 rounded-lg border-2 border-primary-200 hover:border-primary-400 active:border-primary-600" data-template="blank">Blank</button>
              <button class="template-btn px-4 py-2 rounded-lg border-2 border-primary-200 hover:border-primary-400 active:border-primary-600" data-template="weekly-digest">Weekly Digest</button>
              <button class="template-btn px-4 py-2 rounded-lg border-2 border-primary-200 hover:border-primary-400 active:border-primary-600" data-template="announcement">Announcement</button>
              <button class="template-btn px-4 py-2 rounded-lg border-2 border-primary-200 hover:border-primary-400 active:border-primary-600" data-template="featured-post">Featured Post</button>
            </div>
          </div>

          <!-- Subject with Emoji Picker -->
          <div class="mb-6">
            <label class="block text-sm font-medium mb-2">Subject Line</label>
            <div class="flex gap-2">
              <div class="flex-1 relative">
                <input id="newsletter-subject" type="text" placeholder="Enter newsletter subject..." class="w-full px-4 py-3 rounded-lg border border-gray-300 dark:border-gray-600 bg-gray-100 dark:bg-gray-800 text-gray-900 dark:text-gray-100 text-lg" />
                <button id="emoji-picker-btn" class="absolute right-2 top-1/2 -translate-y-1/2 text-xl">😊</button>
              </div>
              <button id="ai-subject-btn" class="px-4 py-2 rounded-lg bg-primary-100 dark:bg-primary-900 text-primary-700 dark:text-primary-300 hover:bg-primary-200 dark:hover:bg-primary-800">
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path d="M13 10V3L4 14h7v7l9-11h-7z"/></svg>
              </button>
            </div>
            <div class="text-xs text-gray-500 mt-1">Tip: Use emojis to increase open rates!</div>
          </div>

          <!-- Rich Text Editor -->
          <div class="mb-6">
            <label class="block text-sm font-medium mb-2">Content</label>
            <div class="border border-gray-300 dark:border-gray-600 rounded-lg overflow-hidden">
              <div class="bg-gray-50 dark:bg-gray-800 border-b border-gray-300 dark:border-gray-600 p-2 flex gap-2 flex-wrap">
                <button class="editor-btn p-1.5 rounded hover:bg-gray-200 dark:hover:bg-gray-700" data-command="bold"><b>B</b></button>
                <button class="editor-btn p-1.5 rounded hover:bg-gray-200 dark:hover:bg-gray-700" data-command="italic"><i>I</i></button>
                <button class="editor-btn p-1.5 rounded hover:bg-gray-200 dark:hover:bg-gray-700" data-command="h2">H2</button>
                <button class="editor-btn p-1.5 rounded hover:bg-gray-200 dark:hover:bg-gray-700" data-command="h3">H3</button>
                <button class="editor-btn p-1.5 rounded hover:bg-gray-200 dark:hover:bg-gray-700" data-command="link">🔗</button>
                <button class="editor-btn p-1.5 rounded hover:bg-gray-200 dark:hover:bg-gray-700" data-command="list-ul">•</button>
                <button class="editor-btn p-1.5 rounded hover:bg-gray-200 dark:hover:bg-gray-700" data-command="list-ol">1.</button>
                <button class="editor-btn p-1.5 rounded hover:bg-gray-200 dark:hover:bg-gray-700" data-command="quote">❝</button>
                <button class="editor-btn p-1.5 rounded hover:bg-gray-200 dark:hover:bg-gray-700" data-command="code">{}</button>
                <div class="w-px h-6 bg-gray-300 dark:bg-gray-600 mx-1"></div>
                <button class="editor-btn p-1.5 rounded hover:bg-gray-200 dark:hover:bg-gray-700" data-command="undo">↩</button>
                <button class="editor-btn p-1.5 rounded hover:bg-gray-200 dark:hover:bg-gray-700" data-command="redo">↪</button>
              </div>
              <div id="newsletter-editor" class="min-h-[300px] max-h-[500px] overflow-y-auto p-4 bg-white dark:bg-gray-900" contenteditable="true"></div>
            </div>
          </div>

          <!-- Test & Preview Actions -->
          <div class="flex flex-wrap gap-3 mb-6">
            <button id="preview-newsletter" class="py-2 px-4 rounded-lg bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 text-base flex items-center gap-2">
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"/><path d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"/></svg>
              Preview
            </button>
            <button id="save-draft-btn" class="py-2 px-4 rounded-lg bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 text-base flex items-center gap-2">
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path d="M8 7H5a2 2 0 00-2 2v9a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-3m-1 4l-3 3m0 0l-3-3m3 3V4"/></svg>
              Save Draft
            </button>
          </div>

          <!-- Send Options -->
          <div class="bg-gray-100 dark:bg-gray-800 rounded-lg p-4 mb-6">
            <h3 class="font-medium mb-3">Send Options</h3>
            <div class="flex flex-wrap gap-4">
              <label class="flex items-center gap-2">
                <input type="checkbox" id="schedule-send" class="rounded border-gray-300">
                Schedule for later
              </label>
              <input type="datetime-local" id="schedule-time" class="px-3 py-1.5 rounded border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-900" disabled>
              <label class="flex items-center gap-2">
                <input type="checkbox" id="segment-subscribers" class="rounded border-gray-300">
                Send to segment
              </label>
              <select id="subscriber-segment" class="px-3 py-1.5 rounded border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-900" disabled>
                <option value="all">All Subscribers</option>
                <option value="active">Active Only</option>
                <option value="recent">Last 30 Days</option>
              </select>
            </div>
          </div>

          <!-- Send Button -->
          <div class="flex justify-between items-center">
            <div class="text-sm text-gray-500" id="recipient-count">0 recipients selected</div>
            <button id="send-newsletter" class="py-3 px-8 rounded-lg bg-primary-600 text-white hover:bg-primary-700 flex items-center gap-2 text-lg font-medium">
              <span>Send Newsletter</span>
              <svg id="send-spinner" class="w-6 h-6 animate-spin hidden" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><circle cx="12" cy="12" r="10" stroke-opacity="0.2"/><path d="M12 2a10 10 0 0 1 10 10" /></svg>
            </button>
          </div>
          <div id="newsletter-status" class="mt-3 text-base min-h-[1.5em]"></div>
        </div>

        <!-- Preview Modal with more features -->
        <div id="newsletter-preview-modal" class="hidden fixed inset-0 z-50 bg-black bg-opacity-40 flex items-center justify-center">
          <div class="bg-white dark:bg-gray-900 rounded-2xl shadow-2xl p-8 max-w-2xl w-full max-h-[90vh] relative flex flex-col">
            <div class="flex justify-between items-center mb-4">
              <h3 class="text-xl font-bold">Newsletter Preview</h3>
              <button id="close-preview" class="text-gray-400 hover:text-red-500">&times;</button>
            </div>
            <div class="flex gap-3 mb-4">
              <button class="preview-mode-btn active px-3 py-1 rounded" data-mode="desktop">💻 Desktop</button>
              <button class="preview-mode-btn px-3 py-1 rounded" data-mode="mobile">📱 Mobile</button>
              <button class="preview-mode-btn px-3 py-1 rounded" data-mode="text">📄 Plain Text</button>
            </div>
            <div id="newsletter-preview-content" class="flex-1 overflow-auto border border-gray-200 dark:border-gray-700 rounded-lg p-4 bg-gray-50 dark:bg-gray-800"></div>
            <div class="flex justify-end gap-3 mt-6">
              <button id="edit-newsletter" class="py-2 px-4 rounded bg-gray-200 hover:bg-gray-300 text-gray-900">Edit</button>
              <button id="confirm-send" class="py-2 px-6 rounded bg-primary-600 text-white hover:bg-primary-700">Send Newsletter</button>
            </div>
          </div>
        </div>
      </div>
      <div id="subscribers-tab" class="tab-content hidden">
        <!-- Subscriber Table -->
        <div class="flex-1 bg-gray-50 dark:bg-gray-900 rounded-2xl p-8 border border-gray-200 dark:border-gray-700 shadow flex flex-col">
          <h2 class="text-2xl font-bold mb-4 flex items-center gap-3">
            <svg class="w-6 h-6 text-primary-700 dark:text-primary-300" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path d="M17 20h5v-2a4 4 0 0 0-3-3.87"/><path d="M9 20H4v-2a4 4 0 0 1 3-3.87"/><circle cx="12" cy="7" r="4"/></svg>
            Subscribers
          </h2>
          <div class="flex gap-3 mb-4">
            <input id="subscriber-search" type="text" placeholder="Search email..." class="flex-1 px-3 py-2 rounded border border-gray-300 dark:border-gray-600 bg-gray-100 dark:bg-gray-800 text-gray-900 dark:text-gray-100 text-base" />
            <button id="refresh-subscribers" class="px-4 py-2 rounded bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 text-gray-700 dark:text-gray-100 text-base">Refresh</button>
          </div>
          <div class="overflow-x-auto rounded-lg border border-gray-200 dark:border-gray-700">
            <table class="min-w-full text-base border-0 rounded">
              <thead>
                <tr class="bg-gray-100 dark:bg-gray-800">
                  <th class="px-4 py-3 text-left font-semibold">Email</th>
                  <th class="px-4 py-3 text-left font-semibold">Subscribed</th>
                  <th class="px-4 py-3 text-left font-semibold">Status</th>
                  <th class="px-4 py-3 text-left font-semibold">Source</th>
                  <th class="px-4 py-3 text-left font-semibold">Actions</th>
                </tr>
              </thead>
              <tbody id="subscriber-table">
                <tr><td colspan="5" class="text-center text-gray-400 py-6">Loading...</td></tr>
              </tbody>
            </table>
          </div>
          <div class="flex justify-between items-center mt-4">
            <span id="subscriber-pagination-info" class="text-sm text-gray-500"></span>
            <div class="flex gap-2">
              <button id="prev-page" class="px-4 py-2 rounded bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 text-gray-700 dark:text-gray-100 text-base">Prev</button>
              <button id="next-page" class="px-4 py-2 rounded bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 text-gray-700 dark:text-gray-100 text-base">Next</button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </section>
</BaseLayout>

<style>
  .tab-btn.active, .tab-btn:focus {
    background-color: #fff;
    color: #3b2f7e;
    border-bottom: 3px solid #3b2f7e;
    z-index: 1;
  }
  .tab-content {
    display: block;
  }
  .tab-content.hidden {
    display: none;
  }
  /* Table row hover effect */
  #subscriber-table tr:hover {
    background-color: #f3f4f6;
  }
  .dark #subscriber-table tr:hover {
    background-color: #232334;
  }
  /* Table cell spacing */
  #subscriber-table td, #subscriber-table th {
    vertical-align: middle;
    min-height: 48px;
    height: 48px;
  }
  /* Button hover/active for actions */
  #subscriber-table button {
    transition: background 0.15s, color 0.15s;
  }
  #subscriber-table button:hover {
    filter: brightness(1.08);
    box-shadow: 0 1px 4px 0 rgba(59,47,126,0.07);
  }
  /* Modal backdrop smoothness */
  #newsletter-preview-modal {
    backdrop-filter: blur(2px);
  }
  .editor-btn.active {
    background-color: #e5e7eb;
  }
  .dark .editor-btn.active {
    background-color: #374151;
  }
  .preview-mode-btn.active {
    background-color: #e5e7eb;
    font-weight: 500;
  }
  .dark .preview-mode-btn.active {
    background-color: #374151;
  }
  #newsletter-editor {
    min-height: 300px;
  }
  #newsletter-editor:focus {
    outline: none;
  }
</style>

<script>
  // --- Tabs ---
  const tabBtns = Array.from(document.querySelectorAll('.tab-btn'));
  const tabContents = Array.from(document.querySelectorAll('.tab-content'));
  function activateTab(tabId) {
    tabBtns.forEach(btn => btn.classList.toggle('active', btn.dataset.tab === tabId));
    tabContents.forEach(tab => tab.classList.toggle('hidden', tab.id !== tabId));
  }
  tabBtns.forEach(btn => {
    btn.onclick = () => activateTab(btn.dataset.tab);
  });
  // Default to API/DB tab
  activateTab('api-db-tab');

  // --- State ---
  let token = localStorage.getItem('adminToken') || '';
  let subscribers = [];
  let filteredSubscribers = [];
  let page = 1, pageSize = 10;
  let totalSubscribers = 0;
  let lastNewsletter = null;
  let lastLoginTime = null;

  // --- Elements ---
  const loginDiv = document.getElementById('admin-login');
  const actionsDiv = document.getElementById('admin-actions');
  const loginBtn = document.getElementById('login-btn');
  const logoutBtn = document.getElementById('logout-btn');
  const loginError = document.getElementById('login-error');
  const adminStatus = document.getElementById('admin-status');
  const adminLog = document.getElementById('admin-log');
  const sendBtn = document.getElementById('send-newsletter');
  const sendSpinner = document.getElementById('send-spinner');
  const newsletterStatus = document.getElementById('newsletter-status');
  const previewBtn = document.getElementById('preview-newsletter');
  const previewModal = document.getElementById('newsletter-preview-modal');
  const previewContent = document.getElementById('newsletter-preview-content');
  const closePreviewBtn = document.getElementById('close-preview');
  const confirmSendBtn = document.getElementById('confirm-send');
  const newsletterSubject = document.getElementById('newsletter-subject');
  const newsletterHtml = document.getElementById('newsletter-html');
  const subscriberTable = document.getElementById('subscriber-table');
  const subscriberSearch = document.getElementById('subscriber-search');
  const refreshSubscribersBtn = document.getElementById('refresh-subscribers');
  const paginationInfo = document.getElementById('subscriber-pagination-info');
  const prevPageBtn = document.getElementById('prev-page');
  const nextPageBtn = document.getElementById('next-page');
  const envInfo = document.getElementById('env-info');
  const apiBaseInfo = document.getElementById('api-base-info');
  const copyApiBaseBtn = document.getElementById('copy-api-base');
  const loginTime = document.getElementById('login-time');
  const apiStatus = document.getElementById('api-status');
  const dbStatus = document.getElementById('db-status');
  const subscriberCount = document.getElementById('subscriber-count');

  // --- Utility ---
  function log(msg, type = 'info') {
    const time = new Date().toLocaleTimeString();
    adminLog.innerHTML = `<div class="mb-1"><span class="font-mono text-gray-400">${time}</span> <span class="${type === 'error' ? 'text-red-500' : type === 'success' ? 'text-green-600' : 'text-gray-700'}">${msg}</span></div>` + adminLog.innerHTML;
  }
  function setStatus(msg, color = 'text-green-600') {
    adminStatus.textContent = msg;
    adminStatus.className = `text-sm min-h-[1.5em] ${color}`;
    log(msg, color.includes('red') ? 'error' : color.includes('green') ? 'success' : 'info');
  }
  function setNewsletterStatus(msg, color = 'text-green-600') {
    newsletterStatus.textContent = msg;
    newsletterStatus.className = `mt-2 text-sm min-h-[1.5em] ${color}`;
    log(msg, color.includes('red') ? 'error' : color.includes('green') ? 'success' : 'info');
  }
  function showActions() {
    loginDiv.classList.add('hidden');
    actionsDiv.classList.remove('hidden');
    lastLoginTime = new Date();
    loginTime.textContent = lastLoginTime.toLocaleString();
    envInfo.textContent = (window.location.hostname === 'localhost' ? 'Development' : 'Production');
    apiBaseInfo.textContent = API_BASE;
    // Test API and DB on login
    testApiAndDb();
    fetchSubscribers();
  }
  function showLogin() {
    loginDiv.classList.remove('hidden');
    actionsDiv.classList.add('hidden');
    localStorage.removeItem('adminToken');
    token = '';
    adminLog.innerHTML = '';
    loginError.textContent = '';
    newsletterStatus.textContent = '';
    adminStatus.textContent = '';
    newsletterSubject.value = '';
    newsletterHtml.value = '';
    subscriberTable.innerHTML = '<tr><td colspan="5" class="text-center text-gray-400 py-4">Login to view subscribers</td></tr>';
  }
  function showSpinner(btn, show = true) {
    const spinner = btn.querySelector('svg');
    if (spinner) spinner.classList.toggle('hidden', !show);
    btn.disabled = show;
  }
  function copyToClipboard(text) {
    navigator.clipboard.writeText(text);
    setStatus('Copied to clipboard!', 'text-blue-600');
  }

  // --- API Base ---
  const API_BASE = location.hostname === 'localhost'
    ? 'http://localhost:4000/api'  // For local development
    : 'https://bitsbysoh4m-api.onrender.com/api';  // For production

  // --- Login ---
  async function login() {
    loginError.textContent = '';
    showSpinner(loginBtn, true);
    const password = document.getElementById('admin-password').value;
    try {
      const res = await fetch(`${API_BASE}/admin`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ password })
      });
      const data = await res.json();
      if (data.success && data.token) {
        token = data.token;
        localStorage.setItem('adminToken', token);
        showActions();
        setStatus('Logged in successfully!', 'text-green-600');
      } else {
        loginError.textContent = data.message || 'Invalid password';
        setStatus('Login failed: ' + (data.message || 'Invalid password'), 'text-red-600');
        log('Login failed: ' + (data.message || 'Invalid password'), 'error');
      }
    } catch (err) {
      loginError.textContent = 'Network error';
      setStatus('Network error during login', 'text-red-600');
      log('Network error during login: ' + err, 'error');
    } finally {
      showSpinner(loginBtn, false);
    }
  }

  // --- API/DB Status ---
  async function testApiAndDb() {
    apiStatus.textContent = 'Checking...';
    dbStatus.textContent = 'Checking...';
    subscriberCount.textContent = '...';
    try {
      // API
      const apiRes = await fetch(`${API_BASE}/admin/test-api`, {
        headers: { Authorization: 'Bearer ' + token }
      });
      const apiData = await apiRes.json();
      if (apiData.success) {
        apiStatus.innerHTML = '<span class="text-green-600">Online</span>';
      } else {
        apiStatus.innerHTML = `<span class="text-red-600">Error: ${apiData.message || 'API error'}</span>`;
      }
      // DB
      const dbRes = await fetch(`${API_BASE}/admin/test-db`, {
        headers: { Authorization: 'Bearer ' + token }
      });
      const dbData = await dbRes.json();
      if (dbData.success) {
        dbStatus.innerHTML = '<span class="text-green-600">Connected</span>';
        subscriberCount.textContent = dbData.subscriberCount;
        totalSubscribers = dbData.subscriberCount;
      } else {
        dbStatus.innerHTML = `<span class="text-red-600">Error: ${dbData.message || 'DB error'}</span>`;
        subscriberCount.textContent = 'Error';
      }
    } catch (err) {
      apiStatus.innerHTML = '<span class="text-red-600">Network error</span>';
      dbStatus.innerHTML = '<span class="text-red-600">Network error</span>';
      subscriberCount.textContent = 'Error';
      setStatus('Error checking API/DB: ' + err, 'text-red-600');
    }
  }

  // --- Subscribers Table ---
  async function fetchSubscribers() {
    setStatus('Loading subscribers...', 'text-blue-600');
    subscriberTable.innerHTML = '<tr><td colspan="5" class="text-center text-gray-400 py-4">Loading...</td></tr>';
    try {
      // Use admin DB endpoint for security
      const res = await fetch(`${API_BASE}/admin/subscribers`, {
        headers: { Authorization: 'Bearer ' + token }
      });
      const data = await res.json();
      if (data.success && Array.isArray(data.subscribers)) {
        subscribers = data.subscribers;
      } else {
        subscribers = [];
      }
    } catch {
      subscribers = [];
    }
    filteredSubscribers = subscribers;
    page = 1;
    renderSubscribers();
    setStatus('Loaded ' + filteredSubscribers.length + ' subscribers.', 'text-green-600');
  }
  function renderSubscribers() {
    let rows = '';
    const start = (page - 1) * pageSize;
    const end = start + pageSize;
    const pageSubs = filteredSubscribers.slice(start, end);
    if (pageSubs.length === 0) {
      rows = `<tr><td colspan="5" class="text-center text-gray-400 py-4">No subscribers found.</td></tr>`;
    } else {
      rows = pageSubs.map(sub => `
        <tr>
          <td class="px-2 py-1 font-mono">${sub.email}</td>
          <td class="px-2 py-1">${sub.subscribedAt ? new Date(sub.subscribedAt).toLocaleString() : '-'}</td>
          <td class="px-2 py-1">
            ${sub.unsubscribed ? '<span class="text-red-600">Unsubscribed</span>' : '<span class="text-green-600">Active</span>'}
          </td>
          <td class="px-2 py-1">${sub.source || '-'}</td>
          <td class="px-2 py-1">
            <button class="text-xs px-2 py-1 rounded bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600" onclick="navigator.clipboard.writeText('${sub.email}');">Copy</button>
            ${!sub.unsubscribed ? `<button class="text-xs px-2 py-1 rounded bg-red-200 dark:bg-red-700 hover:bg-red-300 dark:hover:bg-red-600 ml-1" onclick="unsubscribeUser('${sub.email}')">Unsubscribe</button>` : ''}
          </td>
        </tr>
      `).join('');
    }
    subscriberTable.innerHTML = rows;
    paginationInfo.textContent = `Page ${page} of ${Math.ceil(filteredSubscribers.length / pageSize)}`;
  }
  window.unsubscribeUser = async function(email) {
    if (!confirm(`Unsubscribe ${email}?`)) return;
    setStatus('Unsubscribing ' + email + '...', 'text-blue-600');
    try {
      const res = await fetch(`${API_BASE}/api/unsubscribe?email=${encodeURIComponent(email)}`, { method: 'GET' });
      const text = await res.text();
      setStatus('Unsubscribed: ' + text, 'text-green-600');
      fetchSubscribers();
    } catch (err) {
      setStatus('Failed to unsubscribe: ' + err, 'text-red-600');
    }
  };

  subscriberSearch.oninput = function() {
    const q = subscriberSearch.value.trim().toLowerCase();
    filteredSubscribers = subscribers.filter(sub => sub.email.toLowerCase().includes(q));
    page = 1;
    renderSubscribers();
  };
  refreshSubscribersBtn.onclick = fetchSubscribers;
  prevPageBtn.onclick = function() { if (page > 1) { page--; renderSubscribers(); }};
  nextPageBtn.onclick = function() { if (page < Math.ceil(filteredSubscribers.length / pageSize)) { page++; renderSubscribers(); }};

  // --- Newsletter Preview & Send ---
  previewBtn.onclick = function() {
    const subject = newsletterSubject.value.trim();
    const content = document.getElementById('newsletter-editor').innerHTML.trim();
    if (!subject || !content) {
      setNewsletterStatus('Subject and content required for preview.', 'text-red-600');
      return;
    }
    document.querySelector('.preview-mode-btn[data-mode="desktop"]').click();
    previewContent.innerHTML = `
      <div class="mb-4"><b>Subject:</b> ${subject}</div>
      <hr class="mb-4">
      ${content}
    `;
    previewModal.classList.remove('hidden');
  };
  closePreviewBtn.onclick = () => previewModal.classList.add('hidden');
  confirmSendBtn.onclick = sendNewsletter;
  sendBtn.onclick = function() {
    previewBtn.onclick();
  };

  // --- Newsletter Templates ---
  const templates = {
    blank: {
      subject: "",
      content: ""
    },
    "weekly-digest": {
      subject: "🚀 Your Weekly Tech Digest",
      content: `<h2>This Week's Highlights</h2>
  <ul>
    <li>📱 Latest in Tech</li>
    <li>💡 Tips & Tutorials</li>
    <li>🔮 Industry Insights</li>
  </ul>`
    },
    announcement: {
      subject: "📢 Important Announcement",
      content: `<h2>Exciting News!</h2>
  <p>We're thrilled to announce...</p>`
    },
    "featured-post": {
      subject: "✨ Featured: {POST_TITLE}",
      content: `<h2>{POST_TITLE}</h2>
  <p>{POST_EXCERPT}</p>
  <p><a href="{POST_URL}">Read more →</a></p>`
    }
  };

  // --- Rich Text Editor ---
  const editor = document.getElementById('newsletter-editor');
  const editorBtns = document.querySelectorAll('.editor-btn');

  editorBtns.forEach(btn => {
    btn.onclick = () => {
      const command = btn.dataset.command;
      if (command === 'link') {
        const url = prompt('Enter URL:');
        if (url) document.execCommand('createLink', false, url);
      } else {
        document.execCommand(command, false, null);
      }
      btn.classList.toggle('active');
    }
  });

  // --- Template Selection ---
  document.querySelectorAll('.template-btn').forEach(btn => {
    btn.onclick = () => {
      const template = templates[btn.dataset.template];
      if (template) {
        newsletterSubject.value = template.subject;
        editor.innerHTML = template.content;
      }
    }
  });

  // --- Preview Modes ---
  document.querySelectorAll('.preview-mode-btn').forEach(btn => {
    btn.onclick = () => {
      document.querySelectorAll('.preview-mode-btn').forEach(b => b.classList.remove('active'));
      btn.classList.add('active');
      
      const mode = btn.dataset.mode;
      const content = editor.innerHTML;
      const previewEl = document.getElementById('newsletter-preview-content');
      
      if (mode === 'mobile') {
        previewEl.style.maxWidth = '375px';
        previewEl.style.margin = '0 auto';
      } else if (mode === 'desktop') {
        previewEl.style.maxWidth = 'none';
        previewEl.style.margin = '0';
      } else if (mode === 'text') {
        previewEl.style.maxWidth = 'none';
        previewEl.style.margin = '0';
        previewEl.innerHTML = `<pre>${content.replace(/<[^>]+>/g, '')}</pre>`;
        return;
      }
      previewEl.innerHTML = content;
    }
  });

  // --- Send Options ---
  const scheduleSend = document.getElementById('schedule-send');
  const scheduleTime = document.getElementById('schedule-time');
  const segmentSubscribers = document.getElementById('segment-subscribers');
  const subscriberSegment = document.getElementById('subscriber-segment');
  const recipientCount = document.getElementById('recipient-count');

  scheduleSend.onchange = () => scheduleTime.disabled = !scheduleSend.checked;
  segmentSubscribers.onchange = () => subscriberSegment.disabled = !segmentSubscribers.checked;

  // Update recipient count when segment changes
  subscriberSegment.onchange = updateRecipientCount;
  async function updateRecipientCount() {
    const segment = segmentSubscribers.checked ? subscriberSegment.value : 'all';
    const count = await getRecipientCount(segment);
    recipientCount.textContent = `${count} recipients selected`;
  }

  // --- Save Draft ---
  document.getElementById('save-draft-btn').onclick = () => {
    const draft = {
      subject: newsletterSubject.value,
      content: editor.innerHTML,
      savedAt: new Date().toISOString()
    };
    localStorage.setItem('newsletter-draft', JSON.stringify(draft));
    setNewsletterStatus('Draft saved!', 'text-green-600');
  };

  // Load draft on page load
  const savedDraft = localStorage.getItem('newsletter-draft');
  if (savedDraft) {
    const draft = JSON.parse(savedDraft);
    newsletterSubject.value = draft.subject;
    editor.innerHTML = draft.content;
  }

  // --- Enhanced Send Newsletter ---
  async function sendNewsletter() {
    const subject = newsletterSubject.value.trim();
    const content = document.getElementById('newsletter-editor').innerHTML.trim();
    
    if (!subject) {
      setNewsletterStatus('Please enter a subject line.', 'text-red-600');
      return;
    }

    if (!content || content === '<br>' || content === '<p></p>') {
      setNewsletterStatus('Please add some content to your newsletter.', 'text-red-600');
      return;
    }

    const payload = {
      subject,
      html: content,
      scheduled: scheduleSend.checked ? scheduleTime.value : null,
      segment: segmentSubscribers.checked ? subscriberSegment.value : 'all'
    };

    if (scheduleSend.checked && !scheduleTime.value) {
      setNewsletterStatus('Please select a schedule time.', 'text-red-600');
      return;
    }

    setNewsletterStatus('Sending...', 'text-blue-600');
    showSpinner(sendBtn, true);
    showSpinner(confirmSendBtn, true);

    try {
      const res = await fetch(`${API_BASE}/admin/send-newsletter`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: 'Bearer ' + token
        },
        body: JSON.stringify(payload)
      });

      // Check if response is JSON
      const contentType = res.headers.get('content-type');
      if (contentType && contentType.includes('application/json')) {
        const data = await res.json();
        if (data.success) {
          handleSuccessfulSend(data, subject);
        } else {
          throw new Error(data.message || 'Failed to send newsletter');
        }
      } else {
        // Handle non-JSON response
        const text = await res.text();
        if (res.ok) {
          handleSuccessfulSend({ sent: 'all', failed: 0 }, subject);
        } else {
          throw new Error(text || 'Failed to send newsletter');
        }
      }
    } catch (err) {
      setNewsletterStatus('Failed to send newsletter: ' + err.message, 'text-red-600');
      log('Newsletter send error: ' + err.message, 'error');
      console.error('Newsletter send error:', err);
    } finally {
      showSpinner(sendBtn, false);
      showSpinner(confirmSendBtn, false);
    }
  }

  // Helper function to get recipient count
  async function getRecipientCount(segment = 'all') {
    try {
      const db = await fetch(`${API_BASE}/admin/test-db`, {
        headers: { Authorization: 'Bearer ' + token }
      });
      const dbData = await db.json();
      return dbData.success ? dbData.subscriberCount : 0;
    } catch (err) {
      console.error("Error getting recipient count:", err);
      return 0;
    }
  }

  // Helper function for successful newsletter send
  function handleSuccessfulSend(data, subject) {
    setNewsletterStatus(
      scheduleSend.checked 
        ? `Newsletter scheduled for ${new Date(scheduleTime.value).toLocaleString()}` 
        : `Sent to ${data.sent} subscribers. Failed: ${data.failed || 0}`,
      'text-green-600'
    );
    
    // Clear draft and editor
    localStorage.removeItem('newsletter-draft');
    newsletterSubject.value = '';
    document.getElementById('newsletter-editor').innerHTML = '';
    previewModal.classList.add('hidden');
    
    // Log success
    log(`Newsletter "${subject}" sent successfully to ${data.sent} subscribers`);
  }

  // --- Logout ---
  logoutBtn.onclick = showLogin;
  
  // --- Copy API base ---
  copyApiBaseBtn.onclick = () => copyToClipboard(API_BASE);
  
  // --- Auto-login if token exists ---
  if (token) showActions();
  
  // --- Keyboard shortcuts ---
  document.addEventListener('keydown', e => {
    if (e.key === 'Escape' && !previewModal.classList.contains('hidden')) previewModal.classList.add('hidden');
    if (e.ctrlKey && e.key === 'l') { showLogin(); }
  });
  
  // --- Login button spinner ---
  loginBtn.onclick = login;
</script>
