---
let status = 'idle';
let msg = '';

async function handleSubmit(e) {
  e.preventDefault();
  status = 'loading';
  msg = 'Subscribing...';
  const email = e.target.email.value.trim();
  try {
    console.log("Sending subscription request for:", email);
    const res = await fetch("/api/subscribe", {
      method: "POST",
      headers: {"Content-Type": "application/json"},
      body: JSON.stringify({ email }),
    });
    
    console.log("Response status:", res.status);
    const data = await res.json();
    console.log("Response data:", data);
    
    status = res.ok ? "success" : "error";
    msg = data.message;
    if (res.ok) e.target.reset();
  } catch (error) {
    console.error("Subscription error:", error);
    status = 'error';
    msg = "Network error. Please try again.";
  }
}
---

<div class="newsletter-container">
  <h3 class="newsletter-heading text-primary-900 dark:text-primary-200">Stay in the Loop</h3>
  <p class="newsletter-description text-gray-700 dark:text-gray-300"> No spam, just real stories, tech tips, and inspiration delivered weekly straight to your e-mail.</p>
  
  <form id="newsletter-form" class="newsletter-form" aria-label="Subscribe to newsletter">
    <div class="input-container">
      <label for="email" class="visually-hidden">Email address</label>
      <input 
        type="email" 
        id="email" 
        name="email" 
        placeholder="Your email" 
        required 
        autocomplete="email"
        aria-describedby="newsletter-feedback"
      />
      <button 
        type="submit" 
        id="submit-btn"
      >Subscribe</button>
    </div>
    
    <div id="newsletter-feedback" class="form-msg">
      <span id="feedback-message"></span>
    </div>
  </form>
</div>

<style>
  .newsletter-container {
    margin: 3rem 0;
    padding: 2rem;
    border-radius: 0.75rem;
    background-color: rgba(255, 255, 255, 0.7);
    border: 2px solid rgba(0, 0, 0, 0.298);
    transition: all 0.2s ease-in-out;
  }

  :global(.dark) .newsletter-container {
    background-color: rgba(26, 26, 26, 0.7);
    border: 2px solid hsla(0, 0%, 100%, 0.208);
  }

  .newsletter-heading {
    font-size: 1.5rem;
    font-weight: 600;
    margin-top: 0;
    margin-bottom: 0.5rem;
    color: #24242d;
  }

  :global(.dark) .newsletter-heading {
    color: #ffffff;
  }

  .newsletter-description {
    margin-bottom: 1.5rem;
    font-size: 0.95rem;
    line-height: 1.5;
    color: #4b5563;
  }

  :global(.dark) .newsletter-description {
    color: #d1d5db;
  }

  .newsletter-form {
    display: flex;
    flex-direction: column;
    gap: 0.75em;
  }

  .input-container {
    display: flex;
    gap: 0.5em;
    width: 100%;
  }

  .newsletter-form input[type="email"] {
    flex: 1;
    padding: 0.75em 1em;
    border: 1px solid rgba(0, 0, 0, 0.1);
    border-radius: 0.5rem;
    font-size: 1em;
    background-color: #ffffff;
    color: #24242d;
    transition: all 0.2s ease;
  }

  :global(.dark) .newsletter-form input[type="email"] {
    background-color: rgba(26, 26, 26, 0.8);
    border: 1px solid rgba(255, 255, 255, 0.1);
    color: #ffffff;
  }

  .newsletter-form input[type="email"]::placeholder {
    color: #6b7280;
  }

  :global(.dark) .newsletter-form input[type="email"]::placeholder {
    color: #9ca3af;
  }

  .newsletter-form input[type="email"]:focus {
    outline: none;
    box-shadow: 0 0 0 2px rgba(59, 47, 126, 0.2);
    border-color: rgba(59, 47, 126, 0.3);
  }

  :global(.dark) .newsletter-form input[type="email"]:focus {
    box-shadow: 0 0 0 2px rgba(222, 215, 254, 0.2);
    border-color: rgba(222, 215, 254, 0.3);
  }

  .newsletter-form button {
    padding: 0.75em 1.5em;
    border: none;
    border-radius: 0.5rem;
    cursor: pointer;
    transition: all 0.2s ease;
    background-color: #3b2f7e;
    color: #ffffff;
    font-weight: 500;
  }

  :global(.dark) .newsletter-form button {
    background-color: #8378d9; 
    color: #ffffff; /* White text for better contrast */
    box-shadow: 0 2px 8px rgba(131, 120, 217, 0.3); /* Subtle glow effect */
  }

  .newsletter-form button:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(59, 47, 126, 0.15);
    background-color: #2d2a4d;
  }

  :global(.dark) .newsletter-form button:hover {
    background-color: #9a90e9; /* Even lighter purple on hover */
    box-shadow: 0 4px 15px rgba(154, 144, 233, 0.4); /* Enhanced glow effect on hover */
    transform: translateY(-2px); /* Slightly more pronounced lift effect */
  }

  .form-msg {
    font-size: 0.95em;
    padding: 0.5em 0;
    height: 2em;
    transition: all 0.3s ease;
  }

  .form-msg.success { 
    color: #10B981; 
    font-weight: 500;
    display: flex;
    align-items: center;
    gap: 0.5em;
  }

  .form-msg.success::before {
    content: "âœ“";
    display: inline-flex;
    align-items: center;
    justify-content: center;
    width: 18px;
    height: 18px;
    background-color: #10B981;
    color: white;
    border-radius: 50%;
    font-size: 0.8em;
    font-weight: bold;
  }

  .form-msg.error { 
    color: #EF4444; 
  }

  .form-msg.loading { 
    color: #6B7280; 
  }

  .form-msg.loading::after {
    content: "";
    display: inline-block;
    width: 14px;
    height: 14px;
    border: 2px solid #6B7280;
    border-radius: 50%;
    border-top-color: transparent;
    margin-left: 8px;
    vertical-align: text-bottom;
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    to { transform: rotate(360deg); }
  }

  .visually-hidden { 
    position: absolute; 
    left: -10000px; 
  }

  @media (max-width: 600px) {
    .input-container {
      flex-direction: column;
    }
    
    .newsletter-form button {
      width: 100%;
    }
  }
</style>

<script>
  // Client-side form handling
  document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById('newsletter-form');
    const submitBtn = document.getElementById('submit-btn');
    const feedbackDiv = document.getElementById('newsletter-feedback');
    const feedbackMsg = document.getElementById('feedback-message');
    
    if (form) {
      form.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        // Update UI to loading state
        submitBtn.disabled = true;
        submitBtn.textContent = 'Subscribing...';
        feedbackDiv.className = 'form-msg loading';
        feedbackMsg.textContent = 'Sending...';
        
        try {
          const emailInput = document.getElementById('email');
          const email = emailInput.value.trim();
          
          console.log('Submitting newsletter form with email:', email);
          
          // Determine the API URL based on environment
          const isProd = window.location.hostname !== 'localhost' && window.location.hostname !== '127.0.0.1';
          
          // Use the Render API URL for production, local URL for development
          const apiUrl = isProd 
            ? 'https://bitsbysoh4m-api.onrender.com/api/subscribe'  
            : 'http://localhost:4000/api/subscribe';
          
          console.log('Using API URL:', apiUrl);
          
          const response = await fetch(apiUrl, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Origin': window.location.origin
            },
            body: JSON.stringify({ email }),
          });
          
          console.log('Response status:', response.status);
          const data = await response.json();
          console.log('Response data:', data);
          
          // Update UI based on response
          if (response.ok) {
            feedbackDiv.className = 'form-msg success';
            feedbackMsg.textContent = 'Awesome! You\'re subscribed to bitsbysoh4m weekly updates.';
            form.reset();
            
            // Show confetti effect for successful subscription
            showConfetti();
          } else {
            feedbackDiv.className = 'form-msg error';
            feedbackMsg.textContent = data.message || 'Subscription failed.';
          }
        } catch (error) {
          console.error('Error during subscription:', error);
          feedbackDiv.className = 'form-msg error';
          feedbackMsg.textContent = 'Network error connecting to our subscription service. Please try again later.';
        } finally {
          // Reset button state
          submitBtn.disabled = false;
          submitBtn.textContent = 'Subscribe';
        }
      });
    }
  });
  
  // Simple confetti animation for successful subscription
  function showConfetti() {
    const colors = ['#ded7fe', '#3b2f7e', '#2d2a4d', '#ebf0ff'];
    const confettiContainer = document.createElement('div');
    confettiContainer.style.position = 'absolute';
    confettiContainer.style.width = '100%';
    confettiContainer.style.height = '100%';
    confettiContainer.style.top = '0';
    confettiContainer.style.left = '0';
    confettiContainer.style.pointerEvents = 'none';
    confettiContainer.style.zIndex = '100';
    document.body.appendChild(confettiContainer);
    
    // Create confetti pieces
    for (let i = 0; i < 80; i++) {
      const confetti = document.createElement('div');
      confetti.style.position = 'absolute';
      confetti.style.left = Math.random() * 100 + '%';
      confetti.style.top = '-20px';
      confetti.style.width = Math.random() * 8 + 6 + 'px';
      confetti.style.height = Math.random() * 4 + 4 + 'px';
      confetti.style.backgroundColor = colors[Math.floor(Math.random() * colors.length)];
      confetti.style.borderRadius = Math.random() > 0.5 ? '50%' : '2px';
      confetti.style.opacity = Math.random() * 0.5 + 0.5;
      confettiContainer.appendChild(confetti);
      
      // Animate each piece
      const duration = Math.random() * 3 + 2;
      const delay = Math.random() * 1.5;
      
      confetti.animate(
        [
          { transform: 'translateY(0) rotate(0deg)', opacity: 1 },
          { transform: `translateY(${Math.random() * 400 + 200}px) translateX(${Math.random() * 100 - 50}px) rotate(${Math.random() * 360}deg)`, opacity: 0 }
        ],
        {
          duration: duration * 1000,
          delay: delay * 1000,
          easing: 'cubic-bezier(0.1, 0.8, 0.3, 1)',
          fill: 'forwards'
        }
      );
    }
    
    // Remove confetti container after animation
    setTimeout(() => {
      confettiContainer.remove();
    }, 5000);
  }
</script>