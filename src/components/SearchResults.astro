---
import BlogCard from './BlogCard.astro';
import type { CollectionEntry } from 'astro:content';

interface Props {
  posts: CollectionEntry<'blog'>[];
  initialQuery?: string;
}

const { posts, initialQuery = '' } = Astro.props;
---

<div id="search-results" class="mt-6">
  <h2 id="search-heading" class="text-2xl font-semibold mb-6">
    {initialQuery 
      ? `Search results for "${initialQuery}"` 
      : 'All Posts'}
  </h2>
  
  <div id="no-results" class="hidden py-8 text-center text-gray-600 dark:text-gray-400">
    <p>No posts found matching your search criteria.</p>
    <button id="clear-search" class="mt-4 px-6 py-2.5 text-sm rounded-lg bg-white/50 dark:bg-black/5 text-primary-700 dark:text-primary-300 hover:bg-white dark:hover:bg-gray-800 border border-gray-400/90 dark:border-gray-500/90 shadow-sm hover:shadow backdrop-blur-sm transition-all duration-200">
      Clear search
    </button>
  </div>
  
  <div id="results-list">
    {posts.map(post => (
      <div class="post-item" data-title={post.data.title.toLowerCase()} data-content={post.body.toLowerCase()} data-tags={post.data.tags?.join(' ').toLowerCase() || ''}>
        <BlogCard
          title={post.data.title}
          description={post.data.description}
          date={post.data.date}
          url={`/blog/${post.slug}`}
          content={post.body}
          showSearchContext={false}
          searchContext=""
          searchQuery=""
        />
      </div>
    ))}
  </div>
</div>

<style>
  .search-highlight {
    background-color: rgba(255, 255, 0, 0.3);
    padding: 0px 1px;
    border-radius: 2px;
    font-weight: 600;
  }

  :global(.dark) .search-highlight {
    background-color: rgba(255, 215, 0, 0.25);
    color: #ffd700;
  }

  .search-context {
    background-color: rgba(0, 0, 0, 0.04);
    border-left: 3px solid rgba(0, 0, 0, 0.1);
    border-radius: 0 4px 4px 0;
    padding: 8px 12px;
    margin: 8px 0;
    font-size: 0.95em;
    line-height: 1.6;
    overflow-wrap: break-word;
    white-space: normal;
  }

  :global(.dark) .search-context {
    background-color: rgba(255, 255, 255, 0.04);
    border-left: 3px solid rgba(255, 255, 255, 0.1);
  }
</style>

<script>
  const searchHeading = document.getElementById('search-heading');
  const noResults = document.getElementById('no-results');
  const resultsList = document.getElementById('results-list');
  const clearSearchBtn = document.getElementById('clear-search');
  const postItems = document.querySelectorAll('.post-item');
  
  // Extract context around the matched term
  function extractContext(content: string, query: string, contextLength: number = 100): string {
    if (!query || !content) return '';
    
    // Find the position of the match
    const lowerContent = content.toLowerCase();
    const lowerQuery = query.toLowerCase();
    const matchPosition = lowerContent.indexOf(lowerQuery);
    
    if (matchPosition === -1) return '';
    
    // Calculate start and end positions for the context
    let startPos = Math.max(0, matchPosition - contextLength);
    let endPos = Math.min(content.length, matchPosition + query.length + contextLength);
    
    // Try to start at a space to avoid cutting words
    if (startPos > 0) {
      const prevSpace = content.lastIndexOf(' ', matchPosition);
      if (prevSpace !== -1 && prevSpace > matchPosition - contextLength * 2) {
        startPos = prevSpace + 1;
      }
    }
    
    // Try to end at a space or punctuation
    if (endPos < content.length) {
      const nextSpace = content.indexOf('. ', matchPosition);
      if (nextSpace !== -1 && nextSpace < matchPosition + contextLength * 2) {
        endPos = nextSpace + 1;
      }
    }
    
    // Extract the context
    let context = content.substring(startPos, endPos);
    
    // Add ellipsis if needed
    if (startPos > 0) context = '...' + context;
    if (endPos < content.length) context += '...';
    
    return context;
  }

  // Highlight term in the context
  function highlightTerm(context: string, query: string): string {
    if (!query || !context) return context;
    
    // Create a case-insensitive RegExp
    const regex = new RegExp(`(${query.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')})`, 'gi');
    
    // Replace with highlighted version
    return context.replace(regex, '<span class="search-highlight">$1</span>');
  }
  
  // Function to filter posts based on search query
  function filterPosts(query: string) {
    if (!query) {
      // If no query, show all posts
      postItems.forEach(item => {
        item.classList.remove('hidden');
        // Reset search context
        const contextDiv = item.querySelector('.search-context');
        if (contextDiv) contextDiv.remove();
        
        // Reset to standard description
        const description = item.querySelector('.blog-description');
        const searchContext = item.querySelector('.search-context');
        if (description) description.classList.remove('hidden');
        if (searchContext) searchContext.classList.add('hidden');
      });
      
      if (searchHeading) {
        searchHeading.textContent = 'All Posts';
      }
      
      if (noResults) {
        noResults.classList.add('hidden');
      }
      return;
    }
    
    if (searchHeading) {
      searchHeading.textContent = `Search results for "${query}"`;
    }
    
    // Normalize query
    query = query.toLowerCase().trim();
    
    // Filter posts
    let matchCount = 0;
    
    postItems.forEach(item => {
      const title = item.getAttribute('data-title') || '';
      const content = item.getAttribute('data-content') || '';
      const tags = item.getAttribute('data-tags') || '';
      const originalContent = (item.querySelector('.blog-card') as HTMLElement)?.dataset.content || '';
      
      if (title.includes(query) || content.includes(query) || tags.includes(query)) {
        item.classList.remove('hidden');
        matchCount++;
        
        // Extract context with highlighted term
        let context = extractContext(originalContent, query);
        if (context) {
          let highlightedContext = highlightTerm(context, query);
          
          // Find or create the search context element
          let contextElement = item.querySelector('.search-context');
          if (!contextElement) {
            contextElement = document.createElement('div');
            contextElement.className = 'search-context mt-2 text-sm text-gray-700 dark:text-gray-300';
            const cardContent = item.querySelector('.blog-card-content');
            if (cardContent) {
              cardContent.appendChild(contextElement);
            }
          }
          
          // Hide standard description and show context
          const description = item.querySelector('.blog-description');
          if (description) description.classList.add('hidden');
          
          // Update the context
          contextElement.innerHTML = highlightedContext;
          contextElement.classList.remove('hidden');
        }
        
      } else {
        item.classList.add('hidden');
      }
    });
    
    // Show/hide no results message
    if (noResults) {
      if (matchCount === 0) {
        noResults.classList.remove('hidden');
      } else {
        noResults.classList.add('hidden');
      }
    }
  }
  
  // Initialize search from URL params
  function initializeSearch() {
    const urlParams = new URLSearchParams(window.location.search);
    const query = urlParams.get('q');
    if (query) {
      filterPosts(query);
    }
  }
  
  // Listen for search updates
  document.addEventListener('search-updated', (e: any) => {
    filterPosts(e.detail.query);
  });
  
  // Handle clear search button
  if (clearSearchBtn) {
    clearSearchBtn.addEventListener('click', () => {
      // Reset search input
      const searchInput = document.getElementById('search-input') as HTMLInputElement;
      if (searchInput) {
        searchInput.value = '';
      }
      
      // Update URL
      const url = new URL(window.location.href);
      url.searchParams.delete('q');
      history.pushState({}, '', url);
      
      // Show all posts
      filterPosts('');
    });
  }
  
  // Initialize on page load
  initializeSearch();
</script>
