---
import BlogCard from './BlogCard.astro';
import type { CollectionEntry } from 'astro:content';
import { getSlug } from '../utils/slug';

interface Props {
  posts: CollectionEntry<'blog'>[];
  initialQuery?: string;
}

const { posts, initialQuery = '' } = Astro.props;
---

<div id="search-results" class="mt-6">
  <h2 id="search-heading" class="text-2xl font-semibold mb-4">
    {initialQuery 
      ? `Search results for "${initialQuery}"` 
      : 'All Posts'}
  </h2>

  <div id="search-stats" class="text-sm text-gray-600 dark:text-gray-400 mb-6 hidden">
    Found <span id="result-count">0</span> results
    <div class="inline-block ml-2">
      <button id="sort-by-relevance" class="px-2 py-1 text-xs rounded-lg bg-gray-300/40 dark:bg-gray-900/30 text-primary-700 dark:text-primary-300 hover:bg-gray-200 dark:hover:bg-gray-800/20 transition-all duration-200">
        Sort by relevance
      </button>
    </div>
  </div>
  
  <div id="no-results" class="hidden py-8 text-center text-gray-600 dark:text-gray-400">
    <p>No posts found matching your search criteria.</p>
    <button id="clear-search" class="mt-4 px-6 py-2.5 text-sm rounded-lg bg-white/50 dark:bg-black/5 text-primary-700 dark:text-primary-300 hover:bg-white dark:hover:bg-gray-800 border border-gray-400/90 dark:border-gray-500/90 shadow-sm hover:shadow backdrop-blur-sm transition-all duration-200">
      Clear search
    </button>
  </div>
  
  <div id="results-list">
    {posts.map(post => {
      const slug = post.data.customSlug || getSlug(post.data.title);
      return (
        <div class="post-item" data-title={post.data.title.toLowerCase()} data-content={post.body.toLowerCase()} data-tags={post.data.tags?.join(' ').toLowerCase() || ''}>
          <BlogCard
            title={post.data.title}
            description={post.data.description}
            date={post.data.date}
            url={`/blog/${slug}`}
            content={post.body}
            showSearchContext={false}
            searchContext=""
            searchQuery=""
          />
        </div>
      );
    })}
  </div>
</div>

<style>
  .search-highlight {
    background-color: rgba(255, 255, 0, 0.3);
    padding: 0px 1px;
    border-radius: 2px;
    font-weight: 600;
  }

  :global(.dark) .search-highlight {
    background-color: rgba(255, 215, 0, 0.25);
    color: #ffd700;
  }

  .search-context {
    background-color: rgba(0, 0, 0, 0.04);
    border-left: 3px solid rgba(0, 0, 0, 0.1);
    border-radius: 0 4px 4px 0;
    padding: 8px 12px;
    margin: 8px 0;
    font-size: 0.95em;
    line-height: 1.6;
    overflow-wrap: break-word;
    white-space: normal;
  }

  :global(.dark) .search-context {
    background-color: rgba(255, 255, 255, 0.04);
    border-left: 3px solid rgba(255, 255, 255, 0.1);
  }

  .match-score {
    display: inline-block;
    font-size: 0.7em;
    padding: 0.15em 0.5em;
    border-radius: 999px;
    background-color: rgba(0,0,0,0.05);
    color: rgba(0,0,0,0.5);
    margin-left: 0.5em;
    vertical-align: middle;
  }

  :global(.dark) .match-score {
    background-color: rgba(255,255,255,0.1);
    color: rgba(255,255,255,0.5);
  }
</style>

<script>
  const searchHeading = document.getElementById('search-heading');
  const searchStats = document.getElementById('search-stats');
  const resultCount = document.getElementById('result-count');
  const noResults = document.getElementById('no-results');
  const resultsList = document.getElementById('results-list');
  const clearSearchBtn = document.getElementById('clear-search');
  const sortByRelevanceBtn = document.getElementById('sort-by-relevance');
  const postItems = document.querySelectorAll('.post-item');
  
  // Fuzzy matching function
  function fuzzyMatch(text: string, query: string): { matches: boolean, score: number } {
    if (!query || !text) return { matches: false, score: 0 };
    
    // Exact match is highest score
    if (text.includes(query)) {
      return { 
        matches: true, 
        score: 1 + (query.length / text.length) // Higher score for longer matches
      };
    }
    
    // Check for fuzzy matches
    let score = 0;
    let matches = 0;
    let lastIndex = -1;
    
    // Convert to arrays for easier character matching
    const queryChars = query.split('');
    
    // Try to find all query characters in order
    for (const char of queryChars) {
      const index = text.indexOf(char, lastIndex + 1);
      if (index !== -1) {
        matches++;
        lastIndex = index;
        // Consecutive matches are better
        if (index === lastIndex + 1) {
          score += 0.5;
        }
      }
    }
    
    // Calculate match percentage 
    const matchPercentage = matches / query.length;
    
    // Return match status and score - require at least 70% character match for fuzzy matches
    if (matchPercentage >= 0.7) {
      return {
        matches: true,
        score: matchPercentage * 0.6  // Fuzzy matches get reduced score
      };
    }
    
    return { matches: false, score: 0 };
  }
  
  // Find the best context for search results
  function findBestContext(content: string, query: string, contextLength: number = 100): string {
    if (!query || !content) return '';
    
    const lowerContent = content.toLowerCase();
    const lowerQuery = query.toLowerCase();
    
    // Try exact match first
    let matchPosition = lowerContent.indexOf(lowerQuery);
    
    // If no exact match, look for the densest area of partial matches
    if (matchPosition === -1) {
      const words = query.toLowerCase().split(/\s+/);
      let bestScore = 0;
      let bestPos = 0;
      
      // Scan through content in chunks
      const chunkSize = 150;
      for (let i = 0; i < lowerContent.length - chunkSize; i += 50) {
        const chunk = lowerContent.substring(i, i + chunkSize);
        let chunkScore = 0;
        
        words.forEach(word => {
          if (word.length >= 3 && chunk.includes(word)) {
            chunkScore += word.length;
          }
        });
        
        if (chunkScore > bestScore) {
          bestScore = chunkScore;
          bestPos = i;
        }
      }
      
      if (bestScore > 0) {
        matchPosition = bestPos;
      } else {
        return '';  // No good match found
      }
    }
    
    // Calculate start and end positions for the context
    let startPos = Math.max(0, matchPosition - contextLength);
    let endPos = Math.min(content.length, matchPosition + query.length + contextLength);
    
    // Try to start at a natural boundary
    if (startPos > 0) {
      const prevPeriod = content.lastIndexOf('. ', matchPosition);
      const prevNewline = content.lastIndexOf('\n', matchPosition);
      const prevSentence = Math.max(prevPeriod, prevNewline);
      
      if (prevSentence !== -1 && prevSentence > matchPosition - contextLength * 2) {
        startPos = prevSentence + 2;  // +2 to skip the period and space
      } else {
        const prevSpace = content.lastIndexOf(' ', matchPosition);
        if (prevSpace !== -1 && prevSpace > matchPosition - contextLength * 1.5) {
          startPos = prevSpace + 1;
        }
      }
    }
    
    // Try to end at a natural boundary
    if (endPos < content.length) {
      const nextPeriod = content.indexOf('. ', matchPosition);
      const nextNewline = content.indexOf('\n', matchPosition);
      let nextSentence = -1;
      
      if (nextPeriod !== -1 && nextNewline !== -1) {
        nextSentence = Math.min(nextPeriod, nextNewline);
      } else {
        nextSentence = Math.max(nextPeriod, nextNewline);
      }
      
      if (nextSentence !== -1 && nextSentence < matchPosition + contextLength * 2) {
        endPos = nextSentence + 1;
      }
    }
    
    // Extract the context
    let context = content.substring(startPos, endPos);
    
    // Add ellipsis if needed
    if (startPos > 0) context = '...' + context;
    if (endPos < content.length) context += '...';
    
    return context;
  }

  // Highlight all occurrences of terms in the context
  function highlightTerms(context: string, query: string): string {
    if (!query || !context) return context;
    
    // Split query into words for better highlighting
    const words = query
      .toLowerCase()
      .split(/\s+/)
      .filter(word => word.length >= 3)  // Only highlight meaningful words
      .map(word => word.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'));  // Escape regex special chars
    
    if (words.length === 0) {
      // Fallback to the full query if no meaningful words
      const escapedQuery = query.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
      const regex = new RegExp(`(${escapedQuery})`, 'gi');
      return context.replace(regex, '<span class="search-highlight">$1</span>');
    }
    
    // Create regex to match any of the words
    const regex = new RegExp(`(${words.join('|')})`, 'gi');
    
    // Replace with highlighted version
    return context.replace(regex, '<span class="search-highlight">$1</span>');
  }
  
  // Function to score and filter posts based on search query
  function filterPosts(query: string) {
    if (!query) {
      // If no query, show all posts and reset UI
      postItems.forEach(item => {
        item.classList.remove('hidden');
        item.removeAttribute('data-score');
        
        // Reset search context
        const contextDiv = item.querySelector('.search-context');
        if (contextDiv) contextDiv.remove();
        
        // Reset to standard description
        const description = item.querySelector('.blog-description');
        if (description) description.classList.remove('hidden');
        
        // Remove score badge if present
        const scoreBadge = item.querySelector('.match-score');
        if (scoreBadge) scoreBadge.remove();
      });
      
      if (searchHeading) {
        searchHeading.textContent = 'All Posts';
      }
      
      if (searchStats) {
        searchStats.classList.add('hidden');
      }
      
      if (noResults) {
        noResults.classList.add('hidden');
      }
      
      return;
    }
    
    if (searchHeading) {
      searchHeading.textContent = `Search results for "${query}"`;
    }
    
    // Normalize query
    query = query.toLowerCase().trim();
    
    // Filter and score posts
    let matchCount = 0;
    const scoredPosts: Array<{element: Element, score: number}> = [];
    
    postItems.forEach(item => {
      const title = item.getAttribute('data-title') || '';
      const content = item.getAttribute('data-content') || '';
      const tags = item.getAttribute('data-tags') || '';
      const originalContent = (item.querySelector('.blog-card') as HTMLElement)?.dataset.content || '';
      
      // Calculate match scores for each field
      const titleMatch = fuzzyMatch(title, query);
      const contentMatch = fuzzyMatch(content, query);
      const tagMatch = fuzzyMatch(tags, query);
      
      // Weighted scoring - titles are more important than content
      let totalScore = 0;
      if (titleMatch.matches) totalScore += titleMatch.score * 3; // Title matches worth 3x
      if (contentMatch.matches) totalScore += contentMatch.score;
      if (tagMatch.matches) totalScore += tagMatch.score * 2; // Tag matches worth 2x
      
      if (totalScore > 0) {
        item.classList.remove('hidden');
        item.setAttribute('data-score', totalScore.toString());
        matchCount++;
        
        // Store for sorting
        scoredPosts.push({element: item, score: totalScore});
        
        // Get the best context snippet with highlighted terms
        let context = findBestContext(originalContent, query);
        if (context) {  // Fixed missing parenthesis here
          let highlightedContext = highlightTerms(context, query);
          
          // Find or create the search context element
          let contextElement = item.querySelector('.search-context');
          if (!contextElement) {
            contextElement = document.createElement('div');
            contextElement.className = 'search-context mt-2 text-sm text-gray-700 dark:text-gray-300';
            const cardContent = item.querySelector('.blog-card-content');
            if (cardContent) {
              cardContent.appendChild(contextElement);
            }
          }
          
          // Hide standard description and show context
          const description = item.querySelector('.blog-description');
          if (description) description.classList.add('hidden');
          
          // Update the context
          contextElement.innerHTML = highlightedContext;
          
          // Add score badge to title if score is high enough
          if (totalScore > 1) {
            let cardTitle = item.querySelector('.blog-card-title');
            if (cardTitle && !cardTitle.querySelector('.match-score')) {
              const scoreIndicator = document.createElement('span');
              scoreIndicator.className = 'match-score';
              scoreIndicator.textContent = `${Math.round(totalScore * 100)}% match`;
              cardTitle.appendChild(scoreIndicator);
            }
          }
        }
      } else {
        item.classList.add('hidden');
      }
    });
    
    // Show count of results
    if (searchStats && resultCount) {
      searchStats.classList.remove('hidden');
      resultCount.textContent = matchCount.toString();
    }
    
    // Show/hide no results message
    if (noResults) {
      if (matchCount === 0) {
        noResults.classList.remove('hidden');
        if (searchStats) searchStats.classList.add('hidden');
      } else {
        noResults.classList.add('hidden');
      }
    }
    
    return scoredPosts;
  }
  
  // Sort results by relevance
  function sortByRelevance() {
    const resultsList = document.getElementById('results-list');
    if (!resultsList) return;
    
    const items = Array.from(resultsList.querySelectorAll('.post-item:not(.hidden)'));
    
    items.sort((a, b) => {
      const scoreA = parseFloat(a.getAttribute('data-score') || '0');
      const scoreB = parseFloat(b.getAttribute('data-score') || '0');
      return scoreB - scoreA; // Higher scores first
    });
    
    // Reattach in sorted order
    items.forEach(item => {
      resultsList.appendChild(item);
    });
  }
  
  // Initialize search from URL params
  function initializeSearch() {
    const urlParams = new URLSearchParams(window.location.search);
    const query = urlParams.get('q');
    if (query) {
      const scoredPosts = filterPosts(query);
      if (scoredPosts && scoredPosts.length > 0) {
        sortByRelevance();
      }
    }
  }
  
  // Listen for search updates
  document.addEventListener('search-updated', (e: any) => {
    const scoredPosts = filterPosts(e.detail.query);
    if (scoredPosts && scoredPosts.length > 0) {
      sortByRelevance();
    }
  });
  
  // Handle clear search button
  if (clearSearchBtn) {
    clearSearchBtn.addEventListener('click', () => {
      // Reset search input
      const searchInput = document.getElementById('search-input') as HTMLInputElement;
      if (searchInput) {
        searchInput.value = '';
      }
      
      // Update URL
      const url = new URL(window.location.href);
      url.searchParams.delete('q');
      history.pushState({}, '', url);
      
      // Show all posts
      filterPosts('');
    });
  }
  
  // Handle sort by relevance button
  if (sortByRelevanceBtn) {
    sortByRelevanceBtn.addEventListener('click', sortByRelevance);
  }
  
  // Initialize on page load
  initializeSearch();
</script>
