---
interface Props {
  placeholder?: string;
  value?: string;
}

const { 
  placeholder = "Search posts...", 
  value = "" 
} = Astro.props;
---

<form id="search-form" class="w-full mx-auto mb-4 md:mb-6">
  <div class="relative group">
    <input
      type="search"
      name="q"
      id="search-input"
      value={value}
      placeholder={placeholder}
      class="w-full py-2 md:py-2.5 pl-10 sm:pl-12 pr-3 sm:pr-4 text-sm sm:text-base rounded-lg sm:rounded-xl bg-white/90 dark:bg-black/5 border border-gray-400/70 dark:border-gray-600/70 text-gray-800 dark:text-gray-100 placeholder-gray-600 dark:placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-gray-500/40 dark:focus:ring-gray-500/30 focus:border-transparent transition-all duration-300 backdrop-blur-sm shadow-sm hover:shadow-md focus:shadow-md"
      autocomplete="off"
    />
    <div class="absolute inset-y-0 left-0 flex items-center pl-3 sm:pl-3.5 pointer-events-none transition-colors">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 sm:h-5 sm:w-5 text-gray-500 dark:text-gray-400 group-hover:text-gray-700 dark:group-hover:text-gray-300 transition-colors duration-200" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
        <path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
      </svg>
    </div>
    <!-- Visual focus indicator for keyboard accessibility -->
    <div class="absolute inset-0 rounded-lg sm:rounded-xl pointer-events-none border border-transparent group-focus-within:border-gray-500/40 dark:group-focus-within:border-gray-500/30 transition-colors duration-200"></div>
  </div>
</form>

<style>
  #search-input::placeholder {
    opacity: 0.8;
    transition: opacity 0.2s ease;
  }
  
  #search-input:focus::placeholder {
    opacity: 0.6;
  }
  
  /* Remove browser default search input styles */
  #search-input::-webkit-search-decoration,
  #search-input::-webkit-search-cancel-button,
  #search-input::-webkit-search-results-button,
  #search-input::-webkit-search-results-decoration {
    -webkit-appearance: none;
    display: none;
  }

  /* Mobile responsive adjustments */
  @media (max-width: 640px) {
    #search-form {
      max-width: 100%;
    }
  }
</style>

<script>
  const form = document.getElementById('search-form');
  const input = document.getElementById('search-input');
  
  if (form && input) {
    // Prevent form submission and handle it via JavaScript
    form.addEventListener('submit', (e) => {
      e.preventDefault();
      updateSearch();
    });

    // Update search when input changes after a short delay
    let debounceTimeout: ReturnType<typeof setTimeout>;
    input.addEventListener('input', () => {
      clearTimeout(debounceTimeout);
      debounceTimeout = setTimeout(() => {
        updateSearch();
      }, 300);
    });

    function updateSearch() {
      const query = (input as HTMLInputElement).value.trim();
      const url = new URL(window.location.href);
      
      if (query) {
        url.searchParams.set('q', query);
      } else {
        url.searchParams.delete('q');
      }
      
      history.pushState({}, '', url);
      
      // Dispatch custom event to notify page of search change
      document.dispatchEvent(new CustomEvent('search-updated', { 
        detail: { query } 
      }));
    }

    // Initialize from URL params on load
    const url = new URL(window.location.href);
    const initialQuery = url.searchParams.get('q');
    if (initialQuery) {
      (input as HTMLInputElement).value = initialQuery;
      document.dispatchEvent(new CustomEvent('search-updated', { 
        detail: { query: initialQuery } 
      }));
    }
  }
</script>
